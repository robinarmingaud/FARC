from copy import deepcopy
from dataclasses import dataclass

import numpy as np

import multi_room_model


@dataclass 
class MultiGenerator:
    simulation : multi_room_model.Simulation
    report : multi_room_model.Report
    n = simulation.people.size

    def interesting_times(self):
        times = []
        for person in self.simulation.people:
            for event in person.schedule.events:
                times += event.start
                times += event.end
        unique_times = np.unique(np.array(times))
        return np.sort(unique_times)

    def calculate_simulation_data(self):
        for person in self.simulation.people:
            person.infected = True
            simulation_copy = deepcopy(self.simulation)
            times = self.interesting_times()
            for time1, time2 in zip(times[:-1], times[1:]):
                self.calculate_event(time1,time2,simulation_copy)


    def calculate_event(time1, time2, simulation : multi_room_model.Simulation):
        for person in simulation.people:
            try :
                person.set_location(person.schedule.get_event_by_time(time1).location)
            except ValueError :
                if person.location != None :
                    person.location.delete_occupant(person)
            
